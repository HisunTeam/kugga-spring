--- #################### 数据库相关配置 ####################

spring:
  # 数据源配置项
  autoconfigure:
    exclude:
      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源
  datasource:
    druid: # Druid 【监控】相关的全局配置
      web-stat-filter:
        enabled: true
      stat-view-servlet:
        enabled: true
        allow: # 设置白名单，不填则允许所有访问
        url-pattern: /druid/*
        login-username: # 控制台管理用户名和密码
        login-password:
      filter:
        stat:
          enabled: true
          log-slow-sql: true # 慢 SQL 记录
          slow-sql-millis: 100
          merge-sql: true
        wall:
          config:
            multi-statement-allow: true
    dynamic: # 多数据源配置
      druid: # Druid 【连接池】相关的全局配置
        initial-size: 1 # 初始连接数
        min-idle: 1 # 最小连接池数量
        max-active: 10 # 最大连接池数量
        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒
        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒
        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒
        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒
        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效
        test-while-idle: true
        test-on-borrow: false
        test-on-return: false
        keep-alive: true
      primary: master
      datasource:
        master:
          name: kugga_db
          url: jdbc:mysql://localhost:3306/${spring.datasource.dynamic.datasource.master.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&characterEncoding=UTF-8&serverTimezone=UTC&autoReconnect=true&nullCatalogMeansCurrent=true&allowPublicKeyRetrieval=true # MySQL Connector/J 8.X 连接的示例
          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例
          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例
          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例
          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.master.name} # SQLServer 连接的示例
          username: kuggaadm
          password: '******'
  #          username: sa
  #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W
  #        slave: # 模拟从库，可根据自己需要修改
  #          name: ruoyi-vue-pro
  #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例
  #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例
  #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例
  #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例
  #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.slave.name} # SQLServer 连接的示例
  #          username: root
  #          password: 123456
  #          username: sa
  #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W

  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优
  redis:
    host: 10.9.50.103 # 地址
    port: 6379 # 端口
    database: 0 # 数据库索引
    password: foobared # 密码，建议生产环境开启

rocketmq:
  name-server: localhost:9876
  producer:
    group: ${spring.application.name}
    access-key: rocketmqadmin
    secret-key: rocketmqadmin123
  consumer:
    access-key: rocketmqadmin
    secret-key: rocketmqadmin123

jasypt:
  encryptor:
    password: yuanma # 加解密的秘钥

--- #################### 定时任务相关配置 ####################

# Quartz 配置项，对应 QuartzProperties 配置类
spring:
  quartz:
    auto-startup: true # 本地开发环境，尽量不要开启 Job
    scheduler-name: schedulerName #clusteredScheduler # Scheduler 名字。默认为 schedulerName
    job-store-type: jdbc # Job 存储器类型。默认为 memory 表示内存，可选 jdbc 使用数据库。
    wait-for-jobs-to-complete-on-shutdown: true # 应用关闭时，是否等待定时任务执行完成。默认为 false ，建议设置为 true
    overwrite-existing-jobs: true # 是否覆盖已有 Job 的配置
    properties: # 添加 Quartz Scheduler 附加属性，更多可以看 http://www.quartz-scheduler.org/documentation/2.4.0-SNAPSHOT/configuration.html 文档
      org:
        quartz:
          # Scheduler 相关配置
          scheduler:
            instanceName: schedulerName
            instanceId: AUTO # 自动生成 instance ID
          # JobStore 相关配置
          jobStore:
            # JobStore 实现类。可见博客：https://blog.csdn.net/weixin_42458219/article/details/122247162
            class: org.springframework.scheduling.quartz.LocalDataSourceJobStore
            isClustered: true # 是集群模式
            clusterCheckinInterval: 15000 # 集群检查频率，单位：毫秒。默认为 15000，即 15 秒
            misfireThreshold: 60000 # misfire 阀值，单位：毫秒。
          # 线程池相关配置
          threadPool:
            threadCount: 25 # 线程池大小。默认为 10 。
            threadPriority: 5 # 线程优先级
            class: org.quartz.simpl.SimpleThreadPool # 线程池类型
    jdbc: # 使用 JDBC 的 JobStore 的时候，JDBC 的配置
      initialize-schema: NEVER # 是否自动使用 SQL 初始化 Quartz 表结构。这里设置成 never ，我们手动创建表结构。

--- #################### 配置中心相关配置 ####################

# Apollo 配置中心
apollo:
  bootstrap:
    enabled: true # 设置 Apollo 在启动阶段生效
    eagerLoad:
      enabled: true # 设置 Apollo 在日志初始化前生效，可以实现日志的动态级别配置
  jdbc: # 自定义的 JDBC 配置项，用于数据库的地址
    dao: com.hisun.kugga.module.infra.dal.mysql.config.ConfigDAOImpl
    url: ${spring.datasource.dynamic.datasource.master.url}
    username: ${spring.datasource.dynamic.datasource.master.username}
    password: ${spring.datasource.dynamic.datasource.master.password}

--- #################### 服务保障相关配置 ####################

# Lock4j 配置项
lock4j:
  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒
  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒

# Resilience4j 配置项
resilience4j:
  ratelimiter:
    instances:
      backendA:
        limit-for-period: 1 # 每个周期内，允许的请求数。默认为 50
        limit-refresh-period: 60s # 每个周期的时长，单位：微秒。默认为 500
        timeout-duration: 1s # 被限流时，阻塞等待的时长，单位：微秒。默认为 5s
        register-health-indicator: true # 是否注册到健康监测

# Spring Boot Admin 配置项
spring:
  boot:
    admin:
      # Spring Boot Admin Client 客户端的相关配置
      client:
        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path} # 设置 Spring Boot Admin Server 地址
        instance:
          prefer-ip: true # 注册实例时，优先使用 IP
      # Spring Boot Admin Server 服务端的相关配置
      context-path: /admin # 配置 Spring

# 日志文件配置
logging:
  file:
    name: ${user.home}/logs/${spring.application.name}.log # 日志文件名，全路径
  level:
    # 配置自己写的 MyBatis Mapper 打印日志
    com.hisun.kugga.duke.user.dal.mysql: debug
    com.hisun.kugga.duke.system.dal.mysql: debug
    com.hisun.kugga.duke.league.dal.mysql: debug
    com.hisun.kugga.module.infra.dal.mysql: debug
    com.hisun.kugga.duke.pay.dal.mysql: debug
    com.hisun.kugga.module.system.dal.mysql: debug
    com.hisun.kugga.module.tool.dal.mysql: debug
    com.hisun.kugga.module.member.dal.mysql: debug
    com.hisun.kugga.duke.chat.dal: debug
    com.hisun.kugga.duke.user.cv.dal.mysql: debug
    com.hisun.kugga.duke.forum.dal.mysql: debug

--- #################### 微信公众号相关配置 ####################
wx: # 参见 https://github.com/Wechat-Group/WxJava/blob/develop/spring-boot-starters/wx-java-mp-spring-boot-starter/README.md 文档
  mp:
    # 公众号配置(必填)
    app-id: wx041349c6f39b268b
    secret: 5abee519483bc9f8cb37ce280e814bd0
    # 存储配置，解决 AccessToken 的跨节点的共享
    config-storage:
      type: RedisTemplate # 采用 RedisTemplate 操作 Redis，会自动从 Spring 中获取
      key-prefix: wx # Redis Key 的前缀 TODO 芋艿：解决下 Redis key 管理的配置
      http-client-type: HttpClient # 采用 HttpClient 请求微信公众号平台

--- #################### 芋道相关配置 ####################

# 芋道配置项，设置当前项目所有自定义的配置
kugga:
  captcha:
    enable: false # 本地环境，暂时关闭图片验证码，方便登录等接口的测试
  security:
    mock-enable: true
  xss:
    enable: true
    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系
      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求
      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求
      - /app-api/duke/recommendation/league-create # 不处理提交推荐报告
      - /app-api/duke/recommendation/notice-create # 不处理提交推荐报告
      - /app-api/duke/resume/create # 不处理提交个人简历
      - /app-api/duke/resume/update # 不处理提交个人简历
      - /app-api/posts/create # 不处理创建贴子
      - /app-api/posts/update-posts # 不处理贴子修改
      - /app-api/posts/reply-posts # 不处理回复贴子
  pay:
    charge-success-url: http://10.9.50.103:8020/TransferStatus
    # 钱包
    wallet:
      appid: 5000000001
      app-secret: f06879f850ac4f42bf5382f46b2594c6
      should-sign: false
      sign-type: HMACSHA256
      platform-account: 41559830924304044032
      urls:
        APP_DETAIL: http://114.132.158.108:9040/app/detail
        CREATE_ACCOUNT: http://114.132.158.108:9040/account/create
        ACCOUNT_DETAIL: http://114.132.158.108:9040/account/detail
        PAYMENT_PREPAY: http://114.132.158.108:9040/payment/prepay
        PAYMENT_PAY_BY_BALANCE: http://114.132.158.108:9040/payment/payByBalance
        PAYMENT_DETAIL: http://114.132.158.108:9040/payment/detail
        PAYMENT_CANCEL: http://114.132.158.108:9040/payment/cancel
        ALLOCATION_APPLY: http://114.132.158.108:9040/allocation/apply
        ALLOCATION_RESULT: http://114.132.158.108:9040/allocation/result
        CHARGE_PRECHARGE: http://114.132.158.108:9040/charge/preCharge
        CHARGE_DETAIL: http://114.132.158.108:9040/charge/detail
        CHARGE_CANCEL: http://114.132.158.108:9040/charge/cancel
        DRAWBACK_APPLY: http://114.132.158.108:9040/drawback/apply
        DRAWBACK_DETAIL: http://114.132.158.108:9040/drawback/detail
        WITHDRAW_TO_PAYPAL: http://114.132.158.108:9040/withdraw/toPaypal
        WITHDRAW_DETAIL: http://114.132.158.108:9040/withdraw/detail
        REDPACKET_HANDOUT: http://114.132.158.108:9040/redPacket/handOut
        REDPACKET_DETAIL: http://114.132.158.108:9040/redPacket/detail
        PROOFREADBILL_APPLY: http://114.132.158.108:9040/proofreadBill/apply
        PROOFREADBILL_RESULT: http://114.132.158.108:9040/proofreadBill/result
  access-log: # 访问日志的配置项
    enable: true
  error-code: # 错误码相关配置项
    enable: false
  demo: false # 关闭演示模式
  email:
    # roundRobinType:normal 轮询，weighted 权重(需要增加 weight 配置)
    roundRobinType: normal
    properties:
      - host: smtpdm-ap-southeast-1.aliyun.com
        port: 465
        username: noreply@kuggaduke.com
        password: 6Cr75NBzZhk6W6qg
        protocol: smtp
        available: true
        weight: 2
        properties:
          mail:
            smtp:
              auth: true
              starttls:
                enable: true
              ssl:
                enable: true
  # 论坛
  forum:
    kugga-max:
      login-url: http://kuggamax2.paradeum.com/api/v1/login/partnerUser
      client-id: e4540af586734ea4beb35e7e2050c20c
      secret: $2a$10$ndbJUpJxap1j04LP4ZPf1utgaWnqKLWtAMC8fKIAQp.M7b7uNsQrS

  s3:
    enable: true
    type: "S3"
    file-config:
      endpoint: "http://10.9.50.104:9000"
      domain: "http://10.9.50.104:9000/public"
      bucket: "public"
      accessKey: "kuggaadmin"
      accessSecret: "kuggaadmin!@#"

justauth:
  enabled: true
  type:
    DINGTALK: # 钉钉
      client-id: dingvrnreaje3yqvzhxg
      client-secret: i8E6iZyDvZj51JIb0tYsYfVQYOks9Cq1lgryEjFRqC79P3iJcrxEwT6Qk2QvLrLI
      ignore-check-redirect-uri: true
    WECHAT_ENTERPRISE: # 企业微信
      client-id: wwd411c69a39ad2e54
      client-secret: 1wTb7hYxnpT2TUbIeHGXGo7T0odav1ic10mLdyyATOw
      agent-id: 1000004
      ignore-check-redirect-uri: true
  cache:
    type: REDIS
    prefix: 'social_auth_state:' # 缓存前缀，目前只对 Redis 缓存生效，默认 JUSTAUTH::STATE::
    timeout: 24h # 超时时长，目前只对 Redis 缓存生效，默认 3 分钟


duke:
  user:
    region-prefix: 99
    forget-pwd-link-prefix: http://10.9.50.103:8020/forgetPassword

